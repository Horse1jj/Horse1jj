import discord
from discord.ext import commands
from mcrcon import MCRcon
import random


RCON_HOST = "your_rcon_host"  # The IP address of your Pavlov Shack server
RCON_PORT = 21115             # The port for RCON, 21115 is default
RCON_PASSWORD = "your_rcon_password"

DISCORD_TOKEN = "your_discord_bot_token"
COMMAND_PREFIX = "?"  # Prefix for bot commands

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix=COMMAND_PREFIX, intents=intents)


def send_rcon_command(command):
    try:
        with MCRcon(RCON_HOST, RCON_PASSWORD, RCON_PORT) as mcr:
            response = mcr.command(command)
            return response
    except Exception as e:
        return f"Error: {str(e)}"


def get_player_list():
    response = send_rcon_command("playerlist")
    if "Error" in response:
        return None, response
    else:
        player_list = response.split("\n")[1:]  
        players = [line.split(" ")[:2] for line in player_list if line]  # Extract IDs and names
        return players, None


@bot.command(name='playercount')
async def player_count(ctx):
    response = send_rcon_command("playerlist")
    if "Error" in response:
        await ctx.send(response)
    else:
        player_list = response.split("\n")
        player_count = len(player_list) - 1  # Exclude header line
        await ctx.send(f"Current player count: {player_count}\nPlayer List:\n{response}")


@bot.command(name='ban')
@commands.has_permissions(ban_members=True)
async def ban_player(ctx, player_id: str, *, reason: str = "No reason provided"):
    response = send_rcon_command(f"ban {player_id} {reason}")
    await ctx.send(f"Banned player {player_id} for: {reason}\n{response}")


@bot.command(name='kick')
@commands.has_permissions(ban_members=True)
async def kick_player(ctx, player_id: str, *, reason: str = "No reason provided"):
    if player_id.lower() == "all":
        players, error = get_player_list()
        if error:
            await ctx.send(error)
            return
        for pid, _ in players:
            response = send_rcon_command(f"kick {pid} {reason}")
        await ctx.send(f"Kicked all players for: {reason}")
    else:
        response = send_rcon_command(f"kick {player_id} {reason}")
        await ctx.send(f"Kicked player {player_id} for: {reason}\n{response}")

# Bot Command to kill a player (requires Ban Members permission)
@bot.command(name='kill')
@commands.has_permissions(ban_members=True)
async def kill_player(ctx, player_id: str):
    response = send_rcon_command(f"kill {player_id}")
    await ctx.send(f"Killed player {player_id}\n{response}")

@bot.command(name='setpin')
@commands.has_permissions(administrator=True)
async def set_pin(ctx, pin: str):
    response = send_rcon_command(f"setserverpin {pin}")
    if "Error" in response:
        await ctx.send(response)
    else:
        await ctx.send(f"Server PIN set to: {pin}")


@bot.command(name='notify')
@commands.has_permissions(administrator=True)
async def notify_players(ctx, *, message):
    response = send_rcon_command(f"notify {message}")
    if "Error" in response:
        await ctx.send(response)
    else:
        await ctx.send(f"Notification sent: {message}")


@bot.command(name='gag')
@commands.has_permissions(ban_members=True)
async def gag_player(ctx, player_id: str):
    if player_id.lower() == "all":
        players, error = get_player_list()
        if error:
            await ctx.send(error)
            return
        for pid, _ in players:
            response = send_rcon_command(f"gag {pid}")
        await ctx.send("Gagged all players (muted).")
    else:
        response = send_rcon_command(f"gag {player_id}")
        await ctx.send(f"Player {player_id} has been gagged (muted).")


@bot.command(name='ungag')
@commands.has_permissions(ban_members=True)
async def ungag_player(ctx, player_id: str):
    if player_id.lower() == "all":
        players, error = get_player_list()
        if error:
            await ctx.send(error)
            return
        for pid, _ in players:
            response = send_rcon_command(f"ungag {pid}")
        await ctx.send("Ungagged all players (unmuted).")
    else:
        response = send_rcon_command(f"ungag {player_id}")
        await ctx.send(f"Player {player_id} has been ungagged (unmuted).")


@bot.command(name='unban')
@commands.has_permissions(ban_members=True)
async def unban_player(ctx, player_id: str):
    response = send_rcon_command(f"unban {player_id}")
    await ctx.send(f"Unbanned player {player_id}\n{response}")


@bot.command(name='revive')
@commands.has_permissions(ban_members=True)
async def revive_player(ctx, player_id: str):
    response = send_rcon_command(f"revive {player_id}")
    await ctx.send(f"Revived player {player_id}\n{response}")


@bot.command(name='rotate')
@commands.has_permissions(administrator=True)
async def rotate_map_or_server(ctx, target: str):
    if target.lower() == "map":
        response = send_rcon_command("rotatemap")
        await ctx.send("Map rotated.")
    elif target.lower() == "server":
        response = send_rcon_command("rotateserver")
        await ctx.send("Server rotated.")
    else:
        await ctx.send("Invalid target. Use 'map' or 'server'.")


@bot.command(name='giveitem')
@commands.has_permissions(manage_roles=True)
async def give_item(ctx, player_id: str, item: str):
    response = send_rcon_command(f"giveitem {player_id} {item}")
    await ctx.send(f"Gave item {item} to player {player_id}\n{response}")


@bot.command(name='givevehicle')
@commands.has_permissions(manage_roles=True)
async def give_vehicle(ctx, player_id: str, vehicle: str):
    response = send_rcon_command(f"givevehicle {player_id} {vehicle}")
    await ctx.send(f"Gave vehicle {vehicle} to player {player_id}\n{response}")


@bot.command(name='setskin')
@commands.has_permissions(manage_roles=True)
async def set_skin(ctx, player_id: str, skin: str):
    response = send_rcon_command(f"setplayerskin {player_id} {skin}")
    await ctx.send(f"Set skin of player {player_id} to {skin}\n{response}")


@bot.command(name='slap')
@commands.has_permissions(ban_members=True)
async def slap_player(ctx, player_id: str):
    response = send_rcon_command(f"slap {player_id}")
    await ctx.send(f"Slapped player {player_id}\n{response}")


@bot.command(name='flush')
@commands.has_permissions(ban_members=True)
async def flush_server(ctx):
    players, error = get_player_list()
    if error:
        await ctx.send(error)
    elif not players:
        await ctx.send("No players currently in the server.")
    else:
        random_player = random.choice(players)  
        player_id, player_name = random_player
        response = send_rcon_command(f"kick {player_id} Flushed to make room for staff.")
        await ctx.send(f"Flushed player {player_name} ({player
