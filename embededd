local dotenv = require('dotenv')
dotenv.config()

local discordia = require('discordia')
local client = discordia.Client()
local rcon = require('rcon')  -- Ensure this is a valid RCON library or adapt to your specific library

local json = require('json')  -- For serializing command registration
local http = require('coro-http')  -- For registering slash commands via Discord API

local RCON_HOST = os.getenv('RCON_HOST') or 'localhost'
local RCON_PORT = tonumber(os.getenv('RCON_PORT')) or 27015
local RCON_PASSWORD = os.getenv('RCON_PASSWORD')
local DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
local CHANNEL_ID = os.getenv('CHANNEL_ID')
local GUILD_ID = os.getenv('GUILD_ID')  -- The ID of the server where the bot is active

-- Default embed color (green)
local embedColor = 0x008000

-- Function to fetch the kill feed from the game server using RCON
local function fetchKillFeed()
    local success, client = pcall(rcon.connect, RCON_HOST, RCON_PORT, RCON_PASSWORD)
    if not success then
        print("Failed to connect to the RCON server.")
        return {}
    end

    local success, response = pcall(client.run, client, 'status')
    client:disconnect()

    if not success then
        print("Failed to fetch the status from the RCON server.")
        return {}
    end

    local killFeed = parseKillFeed(response)
    return killFeed
end

-- Function to parse the kill feed from the RCON response
local function parseKillFeed(response)
    local killFeed = {}

    for line in response:gmatch("[^\r\n]+") do
        if line:match("Kill") then  -- Adjust based on your log format
            local attacker, victim, gunID = line:match("(%S+) killed (%S+) using (%S+)")
            if attacker and victim and gunID then
                table.insert(killFeed, string.format("%s killed %s using %s", attacker, victim, gunID))
            end
        end
    end

    return killFeed
end

-- Function to send the kill feed to the Discord channel as an embed
local function sendToDiscord(messages)
    local channel = client:getChannel(CHANNEL_ID)
    if not channel then
        print("Channel not found.")
        return
    end

    for _, message in ipairs(messages) do
        local embed = {
            title = "Kill Feed",
            description = message,
            color = embedColor  -- Dynamic embed color
        }
        pcall(channel.send, channel, { embed = embed })
    end
end

-- Function to handle test command (!test)
local function sendTestKillFeed(channel)
    local testMessage = "Player1 killed Player2 using AK-47"  -- Example kill feed message
    local embed = {
        title = "Kill Feed",
        description = testMessage,
        color = embedColor  -- Dynamic embed color
    }
    pcall(channel.send, channel, { embed = embed })
end

-- Function to periodically update and send the kill feed to Discord
local function periodicUpdate()
    local clock = discordia.Clock()
    clock:start()

    clock:on("minutely", function()
        local killFeed = fetchKillFeed()
        if #killFeed > 0 then
            sendToDiscord(killFeed)
        end
    end)
end

-- Function to register slash commands with Discord
local function registerSlashCommand()
    local commandData = {
        name = "setcolor",
        description = "Change the color of the kill feed embed using a hex code",
        options = {
            {
                type = 3,  -- String type
                name = "hex",
                description = "Hex code for the embed color (e.g., #FF0000)",
                required = true
            }
        }
    }

    local body = json.encode(commandData)
    local headers = {
        {"Authorization", "Bot " .. DISCORD_TOKEN},
        {"Content-Type", "application/json"}
    }

    -- Register the command globally or for a specific guild
    local url = string.format("https://discord.com/api/v10/applications/%s/guilds/%s/commands", client.user.id, GUILD_ID)
    local res, resBody = http.request("POST", url, headers, body)

    if res.code == 201 then
        print("Slash command registered successfully!")
    else
        print("Failed to register slash command: " .. res.code)
        print(resBody)
    end
end

-- Event handler for when the bot is ready
client:on('ready', function()
    print('Bot is ready!')
    periodicUpdate()
    registerSlashCommand()
end)

-- Event handler for receiving interactions (slash commands)
client:on('interactionCreate', function(interaction)
    if interaction.type == 2 and interaction.data.name == "setcolor" then
        local hex = interaction.data.options[1].value
        local newColor = tonumber(hex:sub(2), 16)  -- Convert hex to number
        
        if newColor then
            embedColor = newColor
            interaction:reply("Embed color updated to " .. hex)
        else
            interaction:reply("Invalid hex code. Please provide a valid hex color code.")
        end
    end
end)

-- Event handler for receiving messages
client:on('messageCreate', function(message)
    -- Check if the message is a command and from the correct channel
    if message.content == "!test" and message.channel.id == CHANNEL_ID then
        sendTestKillFeed(message.channel)
    end
end)

-- Run the bot with the provided token
client:run('Bot ' .. DISCORD_TOKEN)
